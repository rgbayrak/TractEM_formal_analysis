function [src,dti_fib,dti_fa0,dwi,bvals,bvecs,mask] = a31_make_native( ...
	dsi_studio,dwi,bvals,bvecs,mask,dti_dir)

% Use DSI Studio command line to generate FA image from DTI model

% Copy/rename files and prep
mkdir(dti_dir);

copyfile(dwi,fullfile(dti_dir,'data.nii'));
dwi = fullfile(dti_dir,'data.nii');
a31a_change_nan(dwi);

copyfile(mask,fullfile(dti_dir,'nodif_brain_mask.nii'));
mask = fullfile(dti_dir,'nodif_brain_mask.nii');
mask = ziptest(mask);

copyfile(bvals,fullfile(dti_dir,'bvals'));
bvals = fullfile(dti_dir,'bvals');

copyfile(bvecs,fullfile(dti_dir,'bvecs'));
bvecs = fullfile(dti_dir,'bvecs');


% Create source file. DSI Studio is hardcoded to auto-find grad_dev.nii.gz
% and nodif_brain_mask.nii.gz and include them if they are there. So, we
% can't pass those filenames in, we'll just have to make sure they are in
% the right place and named the right thing. Also, they must be zipped!
% Note, if src.gz already exists, DSI Studio will skip this step and just
% use the existing src file.

% >> setenv('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/:/nfs/masi/bayrakrg/Qt/5.12.2/gcc_64/lib/:/usr/local/MATLAB/R2018a/sys/os/glnxa64:/usr/local/MATLAB/R2018a/bin/glnxa64:/usr/local/MATLAB/R2018a/extern/lib/glnxa64:/usr/local/MATLAB/R2018a/sys/java/jre/glnxa64/jre/lib/amd64/native_threads:/usr/local/MATLAB/R2018a/sys/java/jre/glnxa64/jre/lib/amd64/server')
% >> setenv('LD_LIBRARY_PATH', '/nfs/masi/bayrakrg/Qt/5.12.2/gcc_64/lib/:/usr/lib/x86_64-linux-gnu/:/usr/local/MATLAB/R2018a/sys/os/glnxa64:/usr/local/MATLAB/R2018a/bin/glnxa64:/usr/local/MATLAB/R2018a/extern/lib/glnxa64:/usr/local/MATLAB/R2018a/sys/java/jre/glnxa64/jre/lib/amd64/native_threads:/usr/local/MATLAB/R2018a/sys/java/jre/glnxa64/jre/lib/amd64/server')

disp('Creating src file')
system([ ...
	'cd ' dti_dir ' ; ' ...
	dsi_studio ' --action=src ' ...
	'--source=data.nii ' ...
	'--bval=bvals ' ...
	'--bvec=bvecs ' ...
	'--output=src.gz ' ...
	'> dti_src.log'
	]);
src = [dti_dir '/src.gz'];

% Perform DTI reconstruction (make fib file). We'll rename the output file
% to something simpler too.
disp('DTI reconstruction')
system([ ...
	'cd ' dti_dir ' ; ' ...
	dsi_studio ' --action=rec ' ...
	'--source=src.gz ' ...
	'--method=1 ' ...
	'> dti_rec.log ; ' ...
	'mv src.gz.*.fib.gz dti_fib.gz' ...
	]);
dti_fib = [dti_dir '/dti_fib.gz'];

% Generate the FA image and rename.
disp('Exporting FA0')
system([ ...
	'cd ' dti_dir ' ; ' ...
	dsi_studio ' --action=exp ' ...
	'--source=dti_fib.gz ' ...
	'--export=fa0 ' ...
	'> dti_exp.log ; ' ...
	'mv dti_fib.gz.fa0.nii.gz dti_fa0.nii.gz' ...
	]);
zdti_fa0 = [dti_dir '/dti_fa0.nii.gz'];
system(['gunzip ' zdti_fa0]);

% Generate the MD image and rename.
disp('Exporting MD')
system([ ...
	'cd ' dti_dir ' ; ' ...
	dsi_studio ' --action=exp ' ...
	'--source=dti_fib.gz ' ...
    '--export=md ' ...
	'> dti_exp.log ; ' ...
    'mv dti_fib.gz.md.nii.gz dti_md.nii.gz' ...
	]);
zdti_md = [dti_dir '/dti_md.nii.gz'];
system(['gunzip ' zdti_md]);

dti_fa0 = zdti_fa0(1:end-3);
dti_md = zdti_md(1:end-3);

mask = unziptest(mask);

